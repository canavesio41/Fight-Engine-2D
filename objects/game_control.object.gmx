<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init
enum_init();
global.lifebar_height = 0.5;
// timer
global.roomSpeed = 30;
global.seconds = 2;
// Round system
global.roundStart = false;
global.roundEnd = false;
global.roundNumber = 1;
global.playerPoints = 0;
global.enemyPoints = 0;
global.maxVictoryPoints = 2;
// Combo counter system
global.comboCounter = 0;
global.totalComboTimer = 50; // Constante para rellenar el timer (Hollow)
global.comboCounterTimer = global.totalComboTimer;
/*Algo que debo aclarar: Esto sera eficiente para el jugador, 
pero cuando el enemigo empiece a golpear, haganle un contador al enemigo.
Basicamente, copien los objetos y el codigo del ComboCounterTimer y hagan una version
para el enemigo.

Hollow.*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// keyboard checker
if(keyboard_check(vk_lshift)){
    room_speed = 5;
}else{
    room_speed = 60;
}

if(keyboard_check_pressed(vk_escape)){
    game_end();
}

if(keyboard_check_pressed(ord("R"))){
    game_restart();
}
// death controller
if(oEnemy.cur_hp &lt;= 0 &amp;&amp; global.roundEnd == false)
{
   victoryConditionPlayer();
    oEnemy.current_state = states.dead;
}
// combo counter and combo counter timer controller
if (global.roundEnd == false)
{
    ComboCounterTimer();
}
// timer controller
if (global.seconds &lt;= 0)
{
if ((oPlayer.cur_hp &lt; oEnemy.cur_hp) &amp;&amp; global.roundEnd == false)
{
    victoryConditionEnemy();
}
else if ((oPlayer.cur_hp &gt; oEnemy.cur_hp) &amp;&amp; global.roundEnd == false)
{
    victoryConditionEnemy();
}
else if ((oPlayer.cur_hp == oEnemy.cur_hp) &amp;&amp; global.roundEnd == false)
{
    drawCondition();
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
